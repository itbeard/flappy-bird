The core classes, functions, and methods necessary for the Flappy Bird game are:

1. `Game` class: This is the main class that will control the game loop, handle events, and manage the game state.
2. `Bird` class: This class will represent the bird character. It will have methods for flapping, falling, and checking for collisions.
3. `Pipe` class: This class will represent the vertical obstacles. It will have methods for moving the pipes and checking if the bird has passed through the gap.
4. `Score` class: This class will keep track of the player's score. It will have methods for incrementing the score and displaying it on the screen.
5. `Sound` class: This class will handle the sound effects for flapping, scoring, and game over.
6. `main` function: This is the entry point of the game. It will create an instance of the `Game` class and start the game loop.

Now, let's write the code for each of these components.

`main.py`
```python
import pygame
from game import Game

def main():
    pygame.init()
    game = Game()
    game.run()

if __name__ == "__main__":
    main()
```

`game.py`
```python
import pygame
from bird import Bird
from pipe import Pipe
from score import Score
from sound import Sound

class Game:
    def __init__(self):
        self.screen = pygame.display.set_mode((800, 600))
        self.clock = pygame.time.Clock()
        self.bird = Bird()
        self.pipes = [Pipe()]
        self.score = Score()
        self.sound = Sound()
        self.game_over = False

    def run(self):
        while not self.game_over:
            self.handle_events()
            self.update()
            self.draw()
            self.clock.tick(60)

    def handle_events(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                self.game_over = True
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE:
                    self.bird.flap()
                    self.sound.play_flap()
                elif event.key == pygame.K_r:
                    self.restart()

    def update(self):
        self.bird.update()
        for pipe in self.pipes:
            pipe.update()
            if pipe.off_screen():
                self.pipes.remove(pipe)
                self.pipes.append(Pipe())
            if pipe.passed_by(self.bird):
                self.score.increment()
                self.sound.play_score()
            if pipe.collides_with(self.bird):
                self.game_over = True
                self.sound.play_game_over()

    def draw(self):
        self.screen.fill((255, 255, 255))
        self.bird.draw(self.screen)
        for pipe in self.pipes:
            pipe.draw(self.screen)
        self.score.draw(self.screen)
        pygame.display.flip()

    def restart(self):
        self.bird = Bird()
        self.pipes = [Pipe()]
        self.score.reset()
        self.game_over = False
```

`bird.py`
```python
import pygame

class Bird:
    def __init__(self):
        self.x = 100
        self.y = 300
        self.velocity = 0
        self.gravity = 1
        self.flap_power = 15
        self.rect = pygame.Rect(self.x, self.y, 50, 50)

    def flap(self):
        self.velocity = -self.flap_power

    def update(self):
        self.velocity += self.gravity
        self.y += self.velocity
        self.rect.topleft = (self.x, self.y)

    def draw(self, screen):
        pygame.draw.rect(screen, (255, 0, 0), self.rect)
```

`pipe.py`
```python
import pygame
import random

class Pipe:
    def __init__(self):
        self.x = 800
        self.gap_y = random.randint(200, 400)
        self.width = 100
        self.height = 600
        self.velocity = 5
        self.passed = False
        self.top_rect = pygame.Rect(self.x, 0, self.width, self.gap_y)
        self.bottom_rect = pygame.Rect(self.x, self.gap_y + 200, self.width, self.height)

    def update(self):
        self.x -= self.velocity
        self.top_rect.topleft = (self.x, 0)
        self.bottom_rect.topleft = (self.x, self.gap_y + 200)

    def draw(self, screen):
        pygame.draw.rect(screen, (0, 255, 0), self.top_rect)
        pygame.draw.rect(screen, (0, 255, 0), self.bottom_rect)

    def off_screen(self):
        return self.x + self.width < 0

    def passed_by(self, bird):
        if not self.passed and self.x + self.width < bird.x:
            self.passed = True
            return True
        return False

    def collides_with(self, bird):
        return self.top_rect.colliderect(bird.rect) or self.bottom_rect.colliderect(bird.rect)
```

`score.py`
```python
import pygame

class Score:
    def __init__(self):
        self.value = 0
        self.font = pygame.font.Font(None, 36)

    def increment(self):
        self.value += 1

    def reset(self):
        self.value = 0

    def draw(self, screen):
        text = self.font.render(str(self.value), True, (0, 0, 0))
        screen.blit(text, (400, 50))
```

`sound.py`
```python
import pygame

class Sound:
    def __init__(self):
        self.flap_sound = pygame.mixer.Sound('flap.wav')
        self.score_sound = pygame.mixer.Sound('score.wav')
        self.game_over_sound = pygame.mixer.Sound('game_over.wav')

    def play_flap(self):
        self.flap_sound.play()

    def play_score(self):
        self.score_sound.play()

    def play_game_over(self):
        self.game_over_sound.play()
```

`requirements.txt`
```
pygame==2.0.1
```

This is a simple implementation of the Flappy Bird game in Python using the Pygame library. The game has a bird that can flap to ascend and falls due to gravity. There are vertical pipes that move from right to left, and the bird has to navigate through the gaps in the pipes. The score increases by 1 each time the bird passes through a gap. The game ends if the bird touches a pipe or the ground. The game can be restarted by pressing the "R" key. The game also has sound effects for flapping, scoring, and game over.